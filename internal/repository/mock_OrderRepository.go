// Code generated by mockery v1.0.0. DO NOT EDIT.
package repository

import mock "github.com/stretchr/testify/mock"

// MockOrderRepository is an autogenerated mock type for the OrderRepository type
type MockOrderRepository struct {
	mock.Mock
}

// cleanUp provides a mock function with given fields:
func (_m *MockOrderRepository) cleanUp() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNamespaceOrders provides a mock function with given fields: ns
func (_m *MockOrderRepository) DeleteNamespaceOrders(ns string) error {
	ret := _m.Called(ns)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrders provides a mock function with given fields:
func (_m *MockOrderRepository) DeleteOrders() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNamespaceOrders provides a mock function with given fields: ns
func (_m *MockOrderRepository) GetNamespaceOrders(ns string) ([]Order, error) {
	ret := _m.Called(ns)

	var r0 []Order
	if rf, ok := ret.Get(0).(func(string) []Order); ok {
		r0 = rf(ns)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ns)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields:
func (_m *MockOrderRepository) GetOrders() ([]Order, error) {
	ret := _m.Called()

	var r0 []Order
	if rf, ok := ret.Get(0).(func() []Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOrder provides a mock function with given fields: o
func (_m *MockOrderRepository) InsertOrder(o Order) error {
	ret := _m.Called(o)

	var r0 error
	if rf, ok := ret.Get(0).(func(Order) error); ok {
		r0 = rf(o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
